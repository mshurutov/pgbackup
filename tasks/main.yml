---
# tasks file for pgbackup
- name: Check if ansible version is equal or greater than 2.13.9
  when: ansible_version.full is ansible.builtin.version('2.13.9','<')
  tags: pgbackup,pgbckp_ch_sw_vers
  ansible.builtin.fail:
    msg: "Ansible core should be equal or greater than 2.11"

- name: Check if python is equal or greater than 3
  when: ansible_python.version.major is ansible.builtin.version('3','<')
  tags: pgbackup,pgbckp_ch_sw_vers
  ansible.builtin.fail:
    msg: "Python should be equal or greater than 3"

- name: Install backup tool
  tags: pgbackup,pgbckp_install
  ansible.builtin.package:
    name: "{{ pgbackup_packages }}"
    state: present

- name: Check if backup owner exists
  tags: pgbackup,pgbckp_user
  ansible.builtin.user:
    name: "{{ pgbackup_owner }}"
    group: "{{ pgbackup_group }}"

- name: Setup ssh keys for hosts
  when: ssh_keys_create_force is defined and ssh_keys_create_force | bool
  tags: pgbackup,pgbckp_ssh_keys
  ansible.builtin.include_role:
    name: "mshurutov.common"
    tasks_from: "ssh-keys.yml"

- name: Check if config dir exists
  tags: pgbackup,pgbckp_config,pgbckp_config_dir
  ansible.builtin.file:
    path: "{{ item }}"
    mode: "{{ pgbackup_config_dir_mode }}"
    owner: "{{ pgbackup_owner }}"
    group: "{{ pgbackup_group }}"
  loop:
    - "{{ pgbackup_config_dir }}"
    - "{{ pgbackup_custom_config_dir | default(omit) }}"

- name: Configure backup tool (pgbackrest and main config of barman)
  when: pgbackup_tool != "pg_probackup"
  tags: pgbackup,pgbckp_config,pgbckp_config_file,pgbckp_config_file_common
  ansible.builtin.template:
    src: "{{ pgbackup_templates_dir }}/{{ pgbackup_tool }}.cfg.j2"
    dest: "{{ pgbackup_config_file }}"
    mode: "{{ pgbackup_config_file_mode }}"
    owner: "{{ pgbackup_owner }}"
    group: "{{ pgbackup_group }}"
    validate: "{{ pgbackup_config_validate_command }}"

- name: Configure custom instances if mode is separated
  when: when item.mode is defined and item.mode == "separate"
  tags: pgbackup,pgbckp_config,pgbckp_config_file,pgbckp_config_file_instance
  ansible.builtin.template:
    src: "{{ pgbackup_templates_dir }}/{{ pgbackup_tool }}-instance.cfg.j2"
    dest: "{{ pgbackup_custom_config_dir }}/{{ item.name }}.conf"
    mode: "{{ pgbackup_config_file_mode }}"
    owner: "{{ pgbackup_owner }}"
    group: "{{ pgbackup_group }}"
    validate: "{{ pgbackup_config_validate_command }}"
  loop: "{{ pgbackup_instances }}"

- name: Check if base directories exist
  when: item.type == "dir" or item.type == "directory"
  tags: pgbackup,pgbckp_data_dirs
  ansible.builtin.file:
    path: "{{ item.point }}"
    state: directory
    mode: "{{ pgbackup_data_dir_mode }}"
    owner: "{{ pgbackup_owner }}"
    group: "{{ pgbackup_group }}"
  loop: "{{ pgbackup_base_dest }}"

- name: Init tool
  tags: pgbackup,pgbckp_init
  ansible.builtin.command: "{{ pgbackup_init_command }}"
  changed_when: true
  loop: "{{ pgbackup_instances }}"
  when: pgbackup_init_command is defined and pgbackup_init_command | length > 0

- name: Create backup instances
  tags: pgbackup,pgbckp_create
  ansible.builtin.command: "{{ pgbackup_create_command }}"
  changed_when: true
  loop: "{{ pgbackup_instances }}"
  when: pgbackup_create_command is defined and pgbackup_create_command | length > 0

- name: Create schedule for full backups
  tags: pgbackup,pgbckp_schedule,pgbckp_full_schedule
  ansible.builtin.cron:
    name: "Full backup of {{ item.name }}"
    cron_file: "{{ pgbackup_owner }}"
    user: "{{ pgbackup_owner }}"
    job: "{{ item.full.backup_command }}"
    minute: "{{ item.full.minute | default(omit) }}"
    hour: "{{ item.full.hour | default(omit) }}"
    day: "{{ item.full.day | default(omit) }}"
    weekday: "{{ item.full.weekday | default(omit) }}"
    month: "{{ item.full.month | default(omit) }}"
    special_time: "{{ item.full.special_time | default(omit) }}"
  loop: "{{ pgbackup_instances }}"

- name: Create schedule for incremental backups
  tags: pgbackup,pgbckp_schedule,pgbckp_incr_schedule
  ansible.builtin.cron:
    name: "Incremental backup of {{ item.name }}"
    cron_file: "{{ pgbackup_owner }}"
    user: "{{ pgbackup_owner }}"
    job: "{{ item.incr.backup_command }}"
    minute: "{{ item.incr.minute | default(omit) }}"
    hour: "{{ item.incr.hour | default(omit) }}"
    day: "{{ item.incr.day | default(omit) }}"
    weekday: "{{ item.incr.weekday | default(omit) }}"
    month: "{{ item.incr.month | default(omit) }}"
    special_time: "{{ item.incr.special_time | default(omit) }}"
  when: item.incr is defined
  loop: "{{ pgbackup_instances }}"
